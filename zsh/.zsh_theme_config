
# =============================================================================
#                                   Plugins
# =============================================================================
# Check if zplug is installed
if [[ ! -d ~/.zplug ]]; then
  git clone https://github.com/zplug/zplug ~/.zplug
  source ~/.zplug/init.zsh && zplug update --self
fi
source ~/.zplug/init.zsh

#zplug "plugins/bundler", from:oh-my-zsh, if:"which bundle"
zplug "plugins/colored-man-pages", from:oh-my-zsh
#zplug "plugins/extract", from:oh-my-zsh
#zplug "plugins/fancy-ctrl-z", from:oh-my-zsh
#zplug "plugins/git", from:oh-my-zsh, if:"which git"
#zplug "plugins/globalias", from:oh-my-zsh
#zplug "plugins/gpg-agent", from:oh-my-zsh, if:"which gpg-agent"
#zplug "plugins/httpie", from:oh-my-zsh, if:"which httpie"
#zplug "plugins/nanoc", from:oh-my-zsh, if:"which nanoc"
#zplug "plugins/nmap", from:oh-my-zsh, if:"which nmap"
#zplug "plugins/tmux", from:oh-my-zsh, if:"which tmux"
zplug "plugins/vi-mode", from:oh-my-zsh

#zplug "b4b4r07/enhancd", use:init.sh
# zplug "b4b4r07/enhancd", use:enhancd.sh
#zplug "knu/zsh-manydots-magic", use:manydots-magic, defer:2
zplug "seebi/dircolors-solarized", ignore:"*", as:plugin
zplug "zsh-users/zsh-autosuggestions", at:develop
zplug "zsh-users/zsh-completions", defer:2
zplug "zsh-users/zsh-history-substring-search"
zplug "b4b4r07/zsh-vimode-visual", defer:3


# Supports oh-my-zsh plugins and the like
zplug "plugins/git", from:oh-my-zsh
zplug "plugins/nmap", from:oh-my-zsh
zplug "plugins/sudo", from:oh-my-zsh
zplug "plugins/tmux", from:oh-my-zsh
# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
      echo; zplug install
  fi
fi

if [ "$ZSH_THEME" = "powerlevel9k/powerlevel9k" ]; then
  zplug "bhilburn/powerlevel9k", use:powerlevel9k.zsh-theme, at:next
fi
# Then, source plugins and add commands to $PATH
zplug load

if zplug check "seebi/dircolors-solarized"; then
if which gdircolors > /dev/null 2>&1; then
  alias dircolors="gdircolors"
fi
if which dircolors > /dev/null 2>&1; then
  scheme="dircolors.256dark"
  eval $(dircolors ~/.zplug/repos/seebi/dircolors-solarized/$scheme)
fi
fi

# =============================================================================
#                                   Options
# =============================================================================

# improved less option
export LESS="--tabs=4 --no-init --LONG-PROMPT --ignore-case --quit-if-one-screen --RAW-CONTROL-CHARS"

# Watching other users
WATCHFMT="%n %a %l from %m at %t."
#watch=(notme)         # Report login/logout events for everybody except ourself.
LOGCHECK=60           # Time (seconds) between checks for login/logout activity.
REPORTTIME=5          # Display usage statistics for commands running > 5 sec.
#WORDCHARS="\"*?_-.[]~=/&;!#$%^(){}<>\""
WORDCHARS="\"*?_-[]~&;!#$%^(){}<>\""

# History
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt autocd                   # Allow changing directories without `cd`
setopt append_history           # Don;t overwrite history
setopt extended_history         # Also record time and duration of commands.
setopt share_history            # Share history between multiple shells
setopt hist_expire_dups_first   # Clear duplicates when trimming internal hist.
setopt hist_find_no_dups        # Don"t display duplicates during searches.
setopt hist_ignore_dups         # Ignore consecutive duplicates.
setopt hist_ignore_all_dups     # Remember only one unique copy of the command.
setopt hist_reduce_blanks       # Remove superfluous blanks.
setopt hist_save_no_dups        # Omit older commands in favor of newer ones.

# Changing directories
setopt pushd_ignore_dups        # Don"t push copies of the same dir on stack.
setopt pushd_minus              # Reference stack entries with "-".

setopt extended_glob

# =============================================================================
#                                   Aliases
# =============================================================================

# In the definitions below, you will see use of function definitions instead of
# aliases for some cases. We use this method to avoid expansion of the alias in
# combination with the globalias plugin.

# Directory coloring
# if [[ $OSTYPE = (darwin|freebsd)* ]]; then
# # Prefer GNU version, since it respects dircolors.
# alias ls='() { $(whence -p gls) -Ctr --file-type --color=auto $@ }'
# export CLICOLOR="YES" # Equivalent to passing -G to ls.
# export LSCOLORS="exgxdHdHcxaHaHhBhDeaec"
# else
# alias ls='() { $(whence -p ls) -Ctr --file-type --color=auto $@ }'
# fi

# Directory management
alias la="ls -a"
alias ll="ls -l"
alias lal="ls -al"
alias d="dirs -v"
alias 1="pu"
alias 2="pu -2"
alias 3="pu -3"
alias 4="pu -4"
alias 5="pu -5"
alias 6="pu -6"
alias 7="pu -7"
alias 8="pu -8"
alias 9="pu -9"
pu() { pushd $1 > /dev/null 2>&1; dirs -v; }
po() { popd > /dev/null 2>&1; dirs -v }

# Generic command adaptations.
#grep() { $(whence -p grep) --colour=auto $@ }
#egrep() { $(whence -p egrep) --colour=auto $@ }

# Updates editor information when the keymap changes.
# function zle-keymap-select() {
#   zle reset-prompt
#   zle -R
# }


# function vi_mode_prompt_info() {
#   echo "${${KEYMAP/vicmd/[% NORMAL]%}/(main|viins)/[% INSERT]%}"
# }
#
# # define right prompt, regardless of whether the theme defined it
# RPS1='$(vi_mode_prompt_info)'
# RPS2=$RPS1


# =============================================================================
#                                Key Bindings
# =============================================================================
# Vim Bindings zsh-vimode-visual:
# bindkey -M vicmd 'V'  vi-vlines-mode
# bindkey -M vicmd 'v'  vi-visual-mode
# bindkey -M vivis ' '  vi-visual-forward-char
# bindkey -M vivis ','  vi-visual-rev-repeat-find
# bindkey -M vivis '<'  vi-visual-bol
# bindkey -M vivis ';'  vi-visual-repeat-find
# bindkey -M vivis 'B'  vi-visual-backward-blank-word
# bindkey -M vivis 'C'  vi-visual-substitute-lines
# bindkey -M vivis 'D'  vi-visual-kill-and-vicmd
# bindkey -M vivis 'E'  vi-visual-forward-blank-word-end
# bindkey -M vivis 'F'  vi-visual-find-prev-char
# bindkey -M vivis 'G'  vi-visual-goto-line
# bindkey -M vivis 'I'  vi-visual-insert-bol
# bindkey -M vivis 'J'  vi-visual-join
# bindkey -M vivis 'O'  vi-visual-exchange-points
# bindkey -M vivis 'R'  vi-visual-substitute-lines
# bindkey -M vivis 'S ' vi-visual-surround-space
# bindkey -M vivis "S'" vi-visual-surround-squote
# bindkey -M vivis 'S"' vi-visual-surround-dquote
# bindkey -M vivis 'S(' vi-visual-surround-parenthesis
# bindkey -M vivis 'S)' vi-visual-surround-parenthesis
# bindkey -M vivis 'T'  vi-visual-find-prev-char-skip
# bindkey -M vivis 'U'  vi-visual-uppercase-region
# bindkey -M vivis 'V'  vi-visual-exit-to-vlines
# bindkey -M vivis 'W'  vi-visual-forward-blank-word
# bindkey -M vivis 'Y'  vi-visual-yank
# bindkey -M vivis '^M' vi-visual-yank
# bindkey -M vivis '^[' vi-visual-exit
# bindkey -M vivis 'b'  vi-visual-backward-word
# bindkey -M vivis 'c'  vi-visual-change
# bindkey -M vivis 'd'  vi-visual-kill-and-vicmd
# bindkey -M vivis 'e'  vi-visual-forward-word-end
# bindkey -M vivis 'f'  vi-visual-find-next-char
# bindkey -M vivis 'gg' vi-visual-goto-first-line
# bindkey -M vivis 'h'  vi-visual-backward-char
# bindkey -M vivis 'j'  vi-visual-down-line
# bindkey -M vivis 'jj' vi-visual-exit
# bindkey -M vivis 'k'  vi-visual-up-line
# bindkey -M vivis 'l'  vi-visual-forward-char
# bindkey -M vivis 'o'  vi-visual-exchange-points
# bindkey -M vivis 'p'  vi-visual-put
# bindkey -M vivis 'r'  vi-visual-replace-region
# bindkey -M vivis 't'  vi-visual-find-next-char-skip
# bindkey -M vivis 'u'  vi-visual-lowercase-region
# bindkey -M vivis '>'  vi-visual-eol
# bindkey -M vivis 'w'  vi-visual-forward-word
# bindkey -M vivis 'y'  vi-visual-yank

# History
zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
#bindkey -M emacs "^P" history-substring-search-up
#bindkey -M emacs "^N" history-substring-search-down
bindkey -M vicmd "k" history-substring-search-up
bindkey -M vicmd "j" history-substring-search-down
bindkey "^[[1;5A" history-substring-search-up
bindkey "^[[1;5B" history-substring-search-down

# =============================================================================
#                                 Completions
# =============================================================================

# case-insensitive (all), partial-word and then substring completion
zstyle ":completion:*" matcher-list \
"m:{a-zA-Z}={A-Za-z}" \
"r:|[._-]=* r:|=*" \
"l:|=* r:|=*"

zstyle ":completion:*:default" list-colors ${(s.:.)LS_COLORS}

# =============================================================================
#                                    Other
# =============================================================================

# Overwrite oh-my-zsh"s version of `globalias", which makes globbing and
# on-the-fly shell programming painful. The only difference to the original
# function definition is that we do not use the `expand-word" widget.
# See https://github.com/robbyrussell/oh-my-zsh/issues/6123 for discussion.

# Changes an iTerm profile by sending a proprietary escape code that iTerm
# intercepts. This function additionally updates ITERM_PROFILE environment
# variable.
iterm-profile() {
echo -ne "\033]50;SetProfile=$1\a"
export ITERM_PROFILE="$1"
}

# =============================================================================
#                                   Startup
# =============================================================================

# Fixes for alt-backspace and arrows keys
bindkey '^[^?' backward-kill-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# Source local customizations.
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local
[[ -f ~/.zshrc.alias ]] && source ~/.zshrc.alias
# vim: ft=zsh
